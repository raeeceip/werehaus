---
import Layout from "../layouts/Layout.astro";
import { Button } from "../../@/components/ui/button";
import { Input } from "../../@/components/ui/input";
import { Label } from "../../@/components/ui/label";
import {
	Table,
	TableBody,
	TableCell,
	TableHead,
	TableHeader,
	TableRow,
} from "../../@/components/ui/table";
import { fetchItems, createItem } from "../lib/api";

let items = [];
try {
	items = await fetchItems();
} catch (error) {
	console.error("Error fetching items:", error);
}
---

<Layout>
	<h1 class="text-3xl font-bold mb-4">Items</h1>
	<div class="mb-4">
		<Button id="openModalBtn">Add New Item</Button>
	</div>

	<div
		id="itemModal"
		class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden"
	>
		<div class="bg-white p-6 rounded-lg max-w-md w-full">
			<h2 class="text-2xl font-bold mb-4">Add New Item</h2>
			<form id="new-item-form" class="space-y-4">
				<div>
					<Label htmlFor="itemName">Item Name</Label>
					<Input type="text" id="itemName" name="name" required />
				</div>
				<div>
					<Label htmlFor="itemQuantity">Quantity</Label>
					<Input
						type="number"
						id="itemQuantity"
						name="quantity"
						required
						min="0"
					/>
				</div>
				<div>
					<Label htmlFor="itemDescription">Description</Label>
					<Input
						type="text"
						id="itemDescription"
						name="description"
						required
					/>
				</div>
				<div class="flex justify-end space-x-2">
					<Button type="button" id="closeModalBtn" variant="outline"
						>Cancel</Button
					>
					<Button type="submit">Add Item</Button>
				</div>
			</form>
		</div>
	</div>

	<div class="mt-6">
		<Table>
			<TableHeader>
				<TableRow>
					<TableHead>Name</TableHead>
					<TableHead>Quantity</TableHead>
					<TableHead>Description</TableHead>
					<TableHead>Actions</TableHead>
				</TableRow>
			</TableHeader>
			<TableBody>
				{
					items.length > 0 ? (
						items.map((item) => (
							<TableRow>
								<TableCell>{item.name}</TableCell>
								<TableCell>{item.quantity}</TableCell>
								<TableCell>{item.description || "-"}</TableCell>
								<TableCell>
									<Button variant="outline" className="mr-2">
										Edit
									</Button>
									<Button variant="destructive">
										Delete
									</Button>
								</TableCell>
							</TableRow>
						))
					) : (
						<TableRow>
							<TableCell colSpan={4} className="text-center">
								No items found
							</TableCell>
						</TableRow>
					)
				}
			</TableBody>
		</Table>
	</div>
</Layout>

<script>
	import { createItem, fetchItems } from "../lib/api";

	const openModalBtn = document.getElementById("openModalBtn");
	const closeModalBtn = document.getElementById("closeModalBtn");
	const itemModal = document.getElementById("itemModal");
	const newItemForm = document.getElementById(
		"new-item-form",
	) as HTMLFormElement;

	openModalBtn.addEventListener("click", () => {
		itemModal.classList.remove("hidden");
	});

	closeModalBtn.addEventListener("click", () => {
		itemModal.classList.add("hidden");
	});

	newItemForm.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(newItemForm);
		const newItem = Object.fromEntries(formData.entries());

		try {
			await createItem(newItem);
			itemModal.classList.add("hidden");
			newItemForm.reset();
			location.reload(); // Reload the page to show the new item
		} catch (error) {
			console.error("Error creating item:", error);
			// You might want to show an error message to the user here
		}
	});
</script>
