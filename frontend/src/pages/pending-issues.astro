---
import Layout from "../layouts/Layout.astro";
import { Button } from "../../@/components/ui/button";
import { Input } from "../../@/components/ui/input";
import {
	Table,
	TableBody,
	TableCell,
	TableHead,
	TableHeader,
	TableRow,
} from "../../@/components/ui/table";
import { Badge } from "../../@/components/ui/badge";
import { SearchIcon } from "lucide-react";
---

<Layout title="Pending Issues">
	<div class="container mx-auto py-10">
		<h1 class="text-2xl font-bold mb-5">Pending Issues</h1>
		<div class="flex justify-between mb-4">
			<div class="relative w-64">
				<SearchIcon
					class="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground"
				/>
				<Input placeholder="Search issues" class="pl-8" />
			</div>
		</div>
		<Table>
			<TableHeader>
				<TableRow>
					<TableHead>Issue ID</TableHead>
					<TableHead>Type</TableHead>
					<TableHead>Location</TableHead>
					<TableHead>Reported By</TableHead>
					<TableHead>Date</TableHead>
					<TableHead>Priority</TableHead>
					<TableHead>Status</TableHead>
					<TableHead>Actions</TableHead>
				</TableRow>
			</TableHeader>
			<TableBody id="issuesTableBody">
				<TableRow>
					<TableCell colspan="8">Loading...</TableCell>
				</TableRow>
			</TableBody>
		</Table>
	</div>
</Layout>

<script>
	import { fetchPendingIssues, updateIssueStatus } from "../lib/api";

	const issuesTableBody = document.getElementById("issuesTableBody");

	async function loadPendingIssues() {
		try {
			const issues = await fetchPendingIssues();
			issuesTableBody.innerHTML = issues
				.map(
					(issue) => `
        <tr>
          <td>${issue.id}</td>
          <td>${issue.type}</td>
          <td>${issue.location}</td>
          <td>${issue.reportedBy}</td>
          <td>${issue.date}</td>
          <td><Badge variant="${getPriorityVariant(issue.priority)}">${issue.priority}</Badge></td>
          <td>${issue.status}</td>
          <td>
            <Button variant="outline" size="sm" class="mr-2" onclick="resolveIssue(${issue.id})">Resolve</Button>
            <Button variant="outline" size="sm">View Details</Button>
          </td>
        </tr>
      `,
				)
				.join("");
		} catch (error) {
			console.error("Error loading pending issues:", error);
			issuesTableBody.innerHTML =
				'<tr><td colspan="8">Error loading pending issues</td></tr>';
		}
	}

	function getPriorityVariant(priority) {
		switch (priority.toLowerCase()) {
			case "high":
				return "destructive";
			case "medium":
				return "warning";
			case "low":
				return "secondary";
			default:
				return "default";
		}
	}

	async function resolveIssue(issueId) {
		try {
			await updateIssueStatus(issueId, "resolved");
			loadPendingIssues();
		} catch (error) {
			console.error("Error resolving issue:", error);
			alert("Error resolving issue. Please try again.");
		}
	}

	loadPendingIssues();
</script>
