---
import Layout from "../layouts/Layout.astro";
import { Button } from "../../@/components/ui/button";
import { Input } from "../../@/components/ui/input";
import { Label } from "../../@/components/ui/label";
import {
	Table,
	TableBody,
	TableCell,
	TableHead,
	TableHeader,
	TableRow,
} from "../../@/components/ui/table";
---

<Layout>
	<h1 class="text-3xl font-bold mb-4">Locations</h1>

	<Button id="openModalBtn">Add New Location</Button>

	<div
		id="locationModal"
		class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden"
	>
		<div class="bg-white p-6 rounded-lg max-w-md w-full">
			<h2 class="text-2xl font-bold mb-4">Add New Location</h2>
			<form id="new-location-form" class="space-y-4">
				<div>
					<Label htmlFor="locationName">Location Name</Label>
					<Input type="text" id="locationName" name="name" required />
				</div>
				<div>
					<Label htmlFor="locationCapacity">Capacity</Label>
					<Input
						type="number"
						id="locationCapacity"
						name="capacity"
						required
						min="0"
					/>
				</div>
				<div class="flex justify-end space-x-2">
					<Button type="button" id="closeModalBtn" variant="outline"
						>Cancel</Button
					>
					<Button type="submit">Add Location</Button>
				</div>
			</form>
		</div>
	</div>

	<div class="mt-6">
		<Table>
			<TableHeader>
				<TableRow>
					<TableHead>Name</TableHead>
					<TableHead>Capacity</TableHead>
					<TableHead>Actions</TableHead>
				</TableRow>
			</TableHeader>
			<TableBody id="locationsTableBody">
				<!-- Locations will be loaded here -->
			</TableBody>
		</Table>
	</div>
</Layout>

<script>
	import { createLocation, fetchLocations } from "../lib/api";

	const openModalBtn = document.getElementById("openModalBtn");
	const closeModalBtn = document.getElementById("closeModalBtn");
	const locationModal = document.getElementById("locationModal");
	const newLocationForm = document.getElementById(
		"new-location-form",
	) as HTMLFormElement;
	const locationsTableBody = document.getElementById("locationsTableBody");

	openModalBtn.addEventListener("click", () => {
		locationModal.classList.remove("hidden");
	});

	closeModalBtn.addEventListener("click", () => {
		locationModal.classList.add("hidden");
	});

	newLocationForm.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(newLocationForm);
		const newLocation = Object.fromEntries(formData.entries());

		try {
			await createLocation(newLocation);
			locationModal.classList.add("hidden");
			newLocationForm.reset();
			loadLocations();
		} catch (error) {
			console.error("Error creating location:", error);
			alert("Error creating location. Please try again.");
		}
	});

	async function loadLocations() {
		try {
			const locations = await fetchLocations();
			locationsTableBody.innerHTML = locations
				.map(
					(location) => `
				<tr>
					<td>${location.name}</td>
					<td>${location.capacity}</td>
					<td>
						<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2">
							Edit
						</button>
						<button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
							Delete
						</button>
					</td>
				</tr>
			`,
				)
				.join("");
		} catch (error) {
			console.error("Error loading locations:", error);
			locationsTableBody.innerHTML =
				'<tr><td colspan="3">Error loading locations</td></tr>';
		}
	}

	loadLocations();
</script>
