---
import Layout from "../layouts/Layout.astro";
import { Button } from "../../@/components/ui/button";
import { Input } from "../../@/components/ui/input";
import { Label } from "../../@/components/ui/label";
import { Select } from "../../@/components/ui/select";
import { fetchItems, fetchLocations, requestIssue } from "../lib/api";

const items = await fetchItems();
const locations = await fetchLocations();
---

<Layout>
	<h1 class="text-3xl font-bold mb-6">Issue Items</h1>

	<form id="issueForm" class="space-y-4 max-w-md">
		<div>
			<Label htmlFor="itemSelect">Select Item</Label>
			<Select name="item_id" required>
				<option value="">Select an item</option>
				{
					items.map((item) => (
						<option value={item.id}>
							{item.name} (Quantity: {item.quantity})
						</option>
					))
				}
			</Select>
		</div>

		<div>
			<Label htmlFor="quantityInput">Quantity</Label>
			<Input
				type="number"
				id="quantityInput"
				name="quantity"
				required
				min="1"
			/>
		</div>

		<div>
			<Label htmlFor="fromLocationSelect">From Location</Label>
			<Select name="from_location_id" required>
				<option value="">Select a location</option>
				{
					locations.map((location) => (
						<option value={location.id}>{location.name}</option>
					))
				}
			</Select>
		</div>

		<div>
			<Label htmlFor="toLocationSelect">To Location</Label>
			<Select name="to_location_id" required>
				<option value="">Select a location</option>
				{
					locations.map((location) => (
						<option value={location.id}>{location.name}</option>
					))
				}
			</Select>
		</div>

		<Button type="submit" className="w-full">Request Issue</Button>
	</form>

	<div id="issueResult" class="mt-4"></div>
</Layout>

<script>
	import { requestIssue } from "../lib/api";

	const issueForm = document.getElementById("issueForm") as HTMLFormElement;
	const issueResult = document.getElementById("issueResult");

	issueForm.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(issueForm);
		const issueData = Object.fromEntries(formData.entries());

		try {
			const result = await requestIssue(issueData);
			issueResult.innerHTML =
				'<p class="text-green-500">Issue request submitted successfully</p>';
			issueForm.reset();
		} catch (error) {
			console.error("Error requesting issue:", error);
			issueResult.innerHTML =
				'<p class="text-red-500">Error submitting issue request</p>';
		}
	});
</script>
